version: "3.8"
services:
  node-app:
    
    image: hondanx/dockernode
    build:
      context: .
    
    env_file:
      - ./.env
    deploy:
      replicas: 4
      restart_policy:
        condition: on-failure
      update_config:
        parallelism: 2
        delay: 30s
        failure_action: rollback
    depends_on:
      - postgres
      - redis
#    networks:
#      - app_network

  # mongo:
  #   image: mongo
  #   restart: always
  #   volumes:
  #     - ./mongo_db:/data/db
  #   environment:
  #     MONGO_INITDB_ROOT_USERNAME: root
  #     MONGO_INITDB_ROOT_PASSWORD: 1923
  #   networks:
  #     - app_network

  # mongo-express:
  #   image: mongo-express
  #   restart: always
  #   ports:
  #     - 8081:8081
  #   environment:
  #     ME_CONFIG_MONGODB_ADMINUSERNAME: root
  #     ME_CONFIG_MONGODB_ADMINPASSWORD: 1923
  #     ME_CONFIG_MONGODB_URL: mongodb://root:1923@mongo:27017/
  #     ME_CONFIG_BASICAUTH: false
  #   depends_on:
  #     - mongo
  #   networks:
  #     - app_network

  redis:
    image: redis
    restart: always
#    networks:
#      - app_network

  web:
    image: nginx
    volumes:
      - /Docker1/nginx/default.conf:/etc/nginx/conf.d/default.conf
    ports:
      - "80:80"
    depends_on:
      - node-app
#    networks:
#      - app_network
  postgres:
    image: postgres
    restart: always
    environment:
      POSTGRES_PASSWORD: 1923
      POSTGRES_USER: root
    #command: ["sh", "-c", "psql -U root -c 'CREATE DATABASE mydb;' && docker-entrypoint.sh postgres"]
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
#    networks:
#      - app_network
  
#  watchtower:
#    image: containrrr/watchtower
#    container_name: watchtower
#    environment:
#      - WATCHTOWER_TRACE=TRUE
#      - WATCHTOWER_POLL_INTERVAL=30
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock
#    command:
#      - docker1_node-app_1
#    networks:
 #     - app_network


#networks:
#  app_network:
#    driver: overlay
#    attachable: true
